#!/bin/bash -e

. config.conf
BASE_DIR=$(pwd)

export ANDROID_NDK_ROOT="${BASE_DIR}/${NDK_DIR_NAME}"
export NDK_SYSROOT="${ANDROID_NDK_ROOT}/platforms/android-${TARGET_ANDROID_API}/arch-arm"
export PREBUILT=$ANDROID_NDK_ROOT/toolchains/arm-linux-androideabi-4.9/prebuilt/linux-x86
export PATH="$ANDROID_NDK_ROOT:$PATH"

if [ "$DOWNLOAD_SWIG" == "1" ]
then
    echo "Downloading SWIG ..."
    cd "${BASE_DIR}"
    rm -fr "$SWIG_DIR_NAME"
    echo "SWIG downloaded!"
    echo "Extracting SWIG ..."
    tar xzf swig.tar.gz
    cd "$SWIG_DIR_NAME"
    ./configure
    make && sudo make install
    cd ..
    rm -rf "$SWIG_DIR_NAME"
fi

if [ "$DOWNLOAD_OPENSSL" == "1" ]
then
    echo "Downloading OpenSSL ..."
    cd "${BASE_DIR}"
    curl -L -# -o openssl.tar.gz "$OPENSSL_DOWNLOAD_URL" 2>&1
    rm -rf "$OPENSSL_DIR_NAME"
    echo "OpenSSL downloaded!"
    echo "Extracting OpenSSL ..."
    tar xzf openssl.tar.gz && rm -rf openssl.tar.gz
    cd ${BASE_DIR}
    ./openssl-build-target-archs
fi

if [ "$DOWNLOAD_LIBYUV" == "1" ]
then
    echo "Downloading libyuv ..."
    cd "${BASE_DIR}"
    cd "${LIBYUV_REPO_DIR_NAME}"
    export PATH="${BASE_DIR}/${NDK_DIR_NAME}:$PATH"
    sed -i 's/APP_ABI := armeabi armeabi-v7a arm64-v8a x86/APP_ABI := armeabi armeabi-v7a arm64-v8a x86 x86_64 mips mips64/g' jni/Application.mk
    ndk-build
fi

if [ "$DOWNLOAD_OPENH264" == "1" ]
then
    echo "Downloading OpenH264 ..."
    cd "${BASE_DIR}"
    rm -rf "${OPENH264_DIR_NAME}"
    echo "OpenH264 downloaded!"
    echo "Extracting OpenH264 ..."
    tar xzf openh264.tar.gz
    if [ "${OPENH264_DIR_NAME}" == "openh264-1.0.0" ]
    then
        echo "Patching OpenH264 to be able to compile with Android API 21+.."
        cp ${BASE_DIR}/openh264-1.0.0-android21.patch ${BASE_DIR}/${OPENH264_DIR_NAME}/
        cd ${OPENH264_DIR_NAME} && patch -p1 < openh264-1.0.0-android21.patch || true
    fi
    cd ${BASE_DIR}
    ./openh264-build-target-archs || true
fi

if [ "$DOWNLOAD_X264" == "1" ]
then
    echo "Configuring X264"
    cd "${BASE_DIR}"
    rm -fr "${X264_DIR_NAME}"
    tar xjf x264.tar.bz2
    cd "${X264_DIR_NAME}"
    
   ./configure --cross-prefix=$PREBUILT/bin/arm-linux-androideabi- --sysroot=$NDK_SYSROOT --host=arm-linux --enable-pic --enable-static --disable-cli --prefix=${BASE_DIR}/x264-output

fi

if [ "$DOWNLOAD_OPUS" == "1" ]
then
   echo "Configuring OPUS"
   cd "${BASE_DIR}"
   rm -fr "${OPUS_DIR_NAME}"
   tar -zxf opus-1.1.1.tar.gz
   cd "${OPUS_DIR_NAME}"
   #cd opus-1.0.1
   $ANDROID_NDK_ROOT/build/tools/make-standalone-toolchain.sh --platform=android-"${TARGET_ANDROID_API}" --arch=arm --install-dir=/tmp/my_toolchain
    export PATH=/tmp/my_toolchain/bin/:$PATH
    export CC=arm-linux-androideabi-gcc
    export CXX=arm-linux-androideabi-g++
    #./autogen.sh
   ./configure --prefix=${BASE_DIR}/opus-output --host=arm-linux-androideabi 
    #make && make install
fi

if [ "$DOWNLOAD_LIBVPX" == "1" ]
then
    echo "Configuring VPX"
    cd "${BASE_DIR}"
    rm -fr "${LIBVPX_DIR_NAME}"
    unzip libvpx-master.zip
    cd "${LIBVPX_DIR_NAME}"
   ./configure --target=armv7-android-gcc --disable-examples --disable-docs --enable-pic --enable-vp8 --disable-vp9 --disable-vp10 --disable-runtime-cpu-detect --extra-cflags="-mfloat-abi=softfp -mfpu=neon" --disable-webm-io --sdk-path=$ANDROID_NDK_ROOT --target=armv7-android-gcc  --prefix=${BASE_DIR}/vpx-output
   
fi


echo "The build system is ready! Execute: ./build to build PJSIP :)"


